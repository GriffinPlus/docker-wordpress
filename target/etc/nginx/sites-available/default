server {
  listen 80 default_server;
  server_name _;
  root /var/www/html;
  index index.php;

  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  # robots.txt fallback to index.php
  location = /robots.txt {
    # Some WordPress plugin gererate robots.txt file
    allow all;
    try_files $uri $uri/ /index.php?$args @robots;
    access_log off;
    log_not_found off;
  }

  # additional fallback if robots.txt doesn't exist
  location @robots {
    return 200 "User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n";
  }

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac) excepted .well-known directory.
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\.(?!well-known\/) {
    deny all;
  }

  # Deny access to any files with a .php extension in the uploads directory for the single site
  location /wp-content/uploads {
    location ~ \.php$ {
      deny all;
    }
  }

  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }

  location / {
    # This is cool because no php is touched for static content.
    # include the "?$args" part so non-default permalinks doesn't break when using query string
    try_files $uri $uri/ /index.php?$args;
  }

  location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    fastcgi_intercept_errors on;
    fastcgi_pass php;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
  }

  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    expires max;
    log_not_found off;
  }

  # deny access to .htaccess files, if Apache's document root concurs with nginx's one
  location ~ /\.ht {
    deny all;
  }
}
